doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title #{book.title} - Book Explorer
    script(src="https://cdn.tailwindcss.com")
  
  body(class="bg-gray-50")
    div(class="container mx-auto px-4 py-12 max-w-4xl")
      // Back button
      a(
        href="/"
        class="inline-flex items-center text-blue-600 mb-8 hover:text-blue-800"
      )
        svg(
          class="w-5 h-5 mr-2"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        )
          path(
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10 19l-7-7m0 0l7-7m-7 7h18"
          )
        | Back to Search

      div(class="bg-white rounded-lg shadow-md p-8")
        div(class="flex flex-col md:flex-row gap-8")
          // Book cover
          if book.imageUrl
            img(
              src=book.imageUrl
              alt=book.title
              class="w-full md:w-64 h-auto object-cover rounded-lg"
            )
          
          // Book details
          div(class="flex-1")
            h1(class="text-3xl font-bold text-gray-800 mb-4")= book.title
            div(class="space-y-4")
              p(class="text-gray-700")
                span.font-semibold Author: 
                | #{book.author}
              p(class="text-gray-700")
                span.font-semibold Language: 
                | #{book.language}
              p(class="text-gray-700 mt-4")= book.description

        // Action buttons
        div(class="mt-8 flex flex-col sm:flex-row gap-4")
          a(
            href=`https://www.gutenberg.org/files/${book.gutenbergId}/${book.gutenbergId}-0.txt`
            class="inline-block px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-center"
          ) Read Book

        // Analysis options
        div(class="mt-12")
          h2(class="text-2xl font-bold text-gray-800 mb-6") Available Analyses
          div(class="grid gap-6 md:grid-cols-2")
            // Character Analysis
            div(class="border rounded-lg p-6 hover:shadow-lg transition-shadow")
              h3(class="text-xl font-semibold mb-3") Character Analysis
              p(class="text-gray-600 mb-4") Identify key characters and their relationships in the book.
              button(
                class="text-blue-600 hover:text-blue-800"
                onclick=`analyzeText('characters', '${book.gutenbergId}')`
              ) Run Analysis →
              div(id="characters-result" class="mt-4 hidden")
                div(class="animate-pulse h-4 bg-gray-200 rounded w-3/4")

            // Language Analysis
            div(class="border rounded-lg p-6 hover:shadow-lg transition-shadow")
              h3(class="text-xl font-semibold mb-3") Language Analysis
              p(class="text-gray-600 mb-4") Detect and analyze the language patterns used in the text.
              button(
                class="text-blue-600 hover:text-blue-800"
                onclick=`analyzeText('language', '${book.gutenbergId}')`
              ) Run Analysis →
              div(id="language-result" class="mt-4 hidden")
                div(class="animate-pulse h-4 bg-gray-200 rounded w-3/4")

            // Plot Summary
            div(class="border rounded-lg p-6 hover:shadow-lg transition-shadow")
              h3(class="text-xl font-semibold mb-3") Plot Summary
              p(class="text-gray-600 mb-4") Generate a comprehensive summary of the book's plot.
              button(
                class="text-blue-600 hover:text-blue-800"
                onclick=`analyzeText('summary', '${book.gutenbergId}')`
              ) Generate Summary →
              div(id="summary-result" class="mt-4 hidden")
                div(class="animate-pulse h-4 bg-gray-200 rounded w-3/4")

      script.
        async function analyzeText(analysisType, bookId) {
          // Get or create results container
          let resultsContainer = document.getElementById('analysis-results');
          if (!resultsContainer) {
            resultsContainer = document.createElement('div');
            resultsContainer.id = 'analysis-results';
            resultsContainer.className = 'mt-8 space-y-6';  // Add vertical spacing between results
            document.querySelector('.mt-12').appendChild(resultsContainer);
          }

          // Create new analysis container
          const analysisContainer = document.createElement('div');
          analysisContainer.className = 'border rounded-lg p-6';
          analysisContainer.id = `${analysisType}-result`;

          // Add title
          const title = document.createElement('h3');
          title.className = 'text-xl font-semibold mb-4';
          title.textContent = `${analysisType.charAt(0).toUpperCase() + analysisType.slice(1)}`;
          analysisContainer.appendChild(title);

          // Add content div
          const content = document.createElement('div');
          content.className = 'text-gray-700 whitespace-pre-wrap';
          analysisContainer.appendChild(content);

          // Prepend to results container
          resultsContainer.insertBefore(analysisContainer, resultsContainer.firstChild);

          try {
            const response = await fetch(`/api/books/${bookId}/analyze/${analysisType}`);
            if (!response.ok) throw new Error('Analysis failed');
            
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let result = '';

            while (true) {
              const { done, value } = await reader.read();
              if (done) break;
              
              const chunk = decoder.decode(value, { stream: true });
              result += chunk;
              content.textContent = result;
            }
          } catch (error) {
            content.innerHTML = `
              <div class="text-red-600">
                Analysis failed. Please try again.
              </div>
            `;
            console.error(error);
          }
        }

        async function downloadBook(event, gutenbergId, title) {
          event.preventDefault();
          const response = await fetch(`https://www.gutenberg.org/files/${gutenbergId}/${gutenbergId}-0.txt`);
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `${title}.txt`;
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);
        }